{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * Serving Flask app \"__main__\" (lazy loading)\n",
      " * Environment: production\n",
      "   WARNING: This is a development server. Do not use it in a production deployment.\n",
      "   Use a production WSGI server instead.\n",
      " * Debug mode: off\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n",
      "127.0.0.1 - - [01/Jun/2021 01:04:45] \"\u001b[37mGET / HTTP/1.1\u001b[0m\" 200 -\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "문서 출력 :  35                  임대차2법 파장, 고액 월세 평균 25만원 뛰었다\n",
      "36           \"괜히 집 샀다 찍힐라\" 임대차법에 '부자 월세 세입자' 는다\n",
      "40                    서울 강남 200만~300만원 월세 확 늘었다\n",
      "93            [경제통] 금리 내리자 월세 습격, 가난할수록 타격 더 컸다\n",
      "85           월세 전환 늘자 월세 누르기···“임대인·임차인 싸움 붙이나”\n",
      "41           도곡렉슬 2억에 월 270만원…월세, 직장인 월급수준으로 뛴다\n",
      "91              年6000만원 월세받는데 보유세만 1억…다주택자 못버틴다\n",
      "92              어서와, '월세 파업'은 처음이지?…미국 세입자들 뿔났다\n",
      "86         전‧월세 전환율 Q&A…“이미 계약한 월세도 초과분 안 내도 돼”\n",
      "1                     임대차법 9개월, 서울 전세 줄고 월세 늘었다\n",
      "10      고용·주거 한파에 팍팍한 2030…서울시 “월세 최대 200만원 지원”\n",
      "56                     [김동호의 시시각각] 월세의 서러움을 아는가\n",
      "76                   [시론] 주택시장 왜곡하는 전·월세 전환율 족쇄\n",
      "89                                  [분수대] 월세 시대\n",
      "83     전·월세 전환율 낮췄지만 “월세로 바꿀 전세 물건 없는데 집주인만 자극”\n",
      "101           \"월세 몸소 실천한다\"는 윤준병, 알고보니 지역구 정읍 월세\n",
      "37          월급 123만원, 7평 원룸 월세 41만원…서울살이 청년들 절규\n",
      "0              전세 줄고 월세 비싸지고…새 임대차법, 세입자 부담 커졌다\n",
      "100           윤준병 \"월세 사는 사람들 나쁘다고 인식되는 것 옳지 않아\"\n",
      "84              월세 최대 150만원 돌려받도록…與 윤준병, 개정안 발의\n",
      "79         월세는 빈자만 때렸다…소득하위 20%, 상위 80%보다 많이 낸다\n",
      "81         월세는 빈자만 때렸다…소득하위 20%, 상위 80%보다 많이 낸다\n",
      "43                전세 품귀에 월세로 몰린다…수도권 월세지수 역대 최고\n",
      "19                   월세도 공급부족·가격상승…월세난으로 번진 전세난\n",
      "64             5억 전세를 2억 반전세로 바꾸면 월세 100만원→63만원\n",
      "73             씨마른 매매·전세…집주인은 늘어난 세금 내려 월세로 돌렸다\n",
      "87                     [노트북을 열며] 굿바이 전세, 월세의 역습\n",
      "95              전월세전환율 낮추겠단 김현미…집주인 월세 올려도 못막는다\n",
      "18               월세지출, 올해 처음 증가세 전환…\"월세 비중 늘어서\"\n",
      "47          전세난 해결법 '월세공제'꺼낸 與…\"세액공제 뉘집 개 이름인가\"\n",
      "48                최악의 전세난, 월세도 끌어올렸다…월세지수 사상 최고\n",
      "99           \"미투처리 전범\" 이어 \"월세 나쁘지 않다\"…윤준병 위험한 입\n",
      "Name: 제목, dtype: object\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[2021-06-01 01:04:47,424] ERROR in app: Exception on /post3 [POST]\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\tkdal\\Anaconda3\\lib\\site-packages\\flask\\app.py\", line 2446, in wsgi_app\n",
      "    response = self.full_dispatch_request()\n",
      "  File \"C:\\Users\\tkdal\\Anaconda3\\lib\\site-packages\\flask\\app.py\", line 1952, in full_dispatch_request\n",
      "    return self.finalize_request(rv)\n",
      "  File \"C:\\Users\\tkdal\\Anaconda3\\lib\\site-packages\\flask\\app.py\", line 1967, in finalize_request\n",
      "    response = self.make_response(rv)\n",
      "  File \"C:\\Users\\tkdal\\Anaconda3\\lib\\site-packages\\flask\\app.py\", line 2130, in make_response\n",
      "    \" {rv.__class__.__name__}.\".format(rv=rv)\n",
      "TypeError: The view function did not return a valid response. The return type must be a string, dict, tuple, Response instance, or WSGI callable, but it was a DataFrame.\n",
      "127.0.0.1 - - [01/Jun/2021 01:04:47] \"\u001b[1m\u001b[35mPOST /post3 HTTP/1.1\u001b[0m\" 500 -\n",
      "127.0.0.1 - - [01/Jun/2021 01:04:50] \"\u001b[37mGET /test HTTP/1.1\u001b[0m\" 200 -\n",
      "127.0.0.1 - - [01/Jun/2021 01:04:55] \"\u001b[37mGET /test3 HTTP/1.1\u001b[0m\" 200 -\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "문서 출력 :  35                  임대차2법 파장, 고액 월세 평균 25만원 뛰었다\n",
      "36           \"괜히 집 샀다 찍힐라\" 임대차법에 '부자 월세 세입자' 는다\n",
      "40                    서울 강남 200만~300만원 월세 확 늘었다\n",
      "93            [경제통] 금리 내리자 월세 습격, 가난할수록 타격 더 컸다\n",
      "85           월세 전환 늘자 월세 누르기···“임대인·임차인 싸움 붙이나”\n",
      "41           도곡렉슬 2억에 월 270만원…월세, 직장인 월급수준으로 뛴다\n",
      "91              年6000만원 월세받는데 보유세만 1억…다주택자 못버틴다\n",
      "92              어서와, '월세 파업'은 처음이지?…미국 세입자들 뿔났다\n",
      "86         전‧월세 전환율 Q&A…“이미 계약한 월세도 초과분 안 내도 돼”\n",
      "1                     임대차법 9개월, 서울 전세 줄고 월세 늘었다\n",
      "10      고용·주거 한파에 팍팍한 2030…서울시 “월세 최대 200만원 지원”\n",
      "56                     [김동호의 시시각각] 월세의 서러움을 아는가\n",
      "76                   [시론] 주택시장 왜곡하는 전·월세 전환율 족쇄\n",
      "89                                  [분수대] 월세 시대\n",
      "83     전·월세 전환율 낮췄지만 “월세로 바꿀 전세 물건 없는데 집주인만 자극”\n",
      "101           \"월세 몸소 실천한다\"는 윤준병, 알고보니 지역구 정읍 월세\n",
      "37          월급 123만원, 7평 원룸 월세 41만원…서울살이 청년들 절규\n",
      "0              전세 줄고 월세 비싸지고…새 임대차법, 세입자 부담 커졌다\n",
      "100           윤준병 \"월세 사는 사람들 나쁘다고 인식되는 것 옳지 않아\"\n",
      "84              월세 최대 150만원 돌려받도록…與 윤준병, 개정안 발의\n",
      "79         월세는 빈자만 때렸다…소득하위 20%, 상위 80%보다 많이 낸다\n",
      "81         월세는 빈자만 때렸다…소득하위 20%, 상위 80%보다 많이 낸다\n",
      "43                전세 품귀에 월세로 몰린다…수도권 월세지수 역대 최고\n",
      "19                   월세도 공급부족·가격상승…월세난으로 번진 전세난\n",
      "64             5억 전세를 2억 반전세로 바꾸면 월세 100만원→63만원\n",
      "73             씨마른 매매·전세…집주인은 늘어난 세금 내려 월세로 돌렸다\n",
      "87                     [노트북을 열며] 굿바이 전세, 월세의 역습\n",
      "95              전월세전환율 낮추겠단 김현미…집주인 월세 올려도 못막는다\n",
      "18               월세지출, 올해 처음 증가세 전환…\"월세 비중 늘어서\"\n",
      "47          전세난 해결법 '월세공제'꺼낸 與…\"세액공제 뉘집 개 이름인가\"\n",
      "48                최악의 전세난, 월세도 끌어올렸다…월세지수 사상 최고\n",
      "99           \"미투처리 전범\" 이어 \"월세 나쁘지 않다\"…윤준병 위험한 입\n",
      "Name: 제목, dtype: object\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[2021-06-01 01:05:23,794] ERROR in app: Exception on /post3 [POST]\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\tkdal\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py\", line 4736, in get_value\n",
      "    return libindex.get_value_box(s, key)\n",
      "  File \"pandas\\_libs\\index.pyx\", line 51, in pandas._libs.index.get_value_box\n",
      "  File \"pandas\\_libs\\index.pyx\", line 47, in pandas._libs.index.get_value_at\n",
      "  File \"pandas\\_libs\\util.pxd\", line 98, in pandas._libs.util.get_value_at\n",
      "  File \"pandas\\_libs\\util.pxd\", line 83, in pandas._libs.util.validate_indexer\n",
      "TypeError: 'str' object cannot be interpreted as an integer\n",
      "\n",
      "During handling of the above exception, another exception occurred:\n",
      "\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\tkdal\\Anaconda3\\lib\\site-packages\\flask\\app.py\", line 2446, in wsgi_app\n",
      "    response = self.full_dispatch_request()\n",
      "  File \"C:\\Users\\tkdal\\Anaconda3\\lib\\site-packages\\flask\\app.py\", line 1951, in full_dispatch_request\n",
      "    rv = self.handle_user_exception(e)\n",
      "  File \"C:\\Users\\tkdal\\Anaconda3\\lib\\site-packages\\flask\\app.py\", line 1820, in handle_user_exception\n",
      "    reraise(exc_type, exc_value, tb)\n",
      "  File \"C:\\Users\\tkdal\\Anaconda3\\lib\\site-packages\\flask\\_compat.py\", line 39, in reraise\n",
      "    raise value\n",
      "  File \"C:\\Users\\tkdal\\Anaconda3\\lib\\site-packages\\flask\\app.py\", line 1949, in full_dispatch_request\n",
      "    rv = self.dispatch_request()\n",
      "  File \"C:\\Users\\tkdal\\Anaconda3\\lib\\site-packages\\flask\\app.py\", line 1935, in dispatch_request\n",
      "    return self.view_functions[rule.endpoint](**req.view_args)\n",
      "  File \"<ipython-input-7-c7774c03126d>\", line 124, in post3\n",
      "    idx = indices[title]\n",
      "  File \"C:\\Users\\tkdal\\Anaconda3\\lib\\site-packages\\pandas\\core\\series.py\", line 1068, in __getitem__\n",
      "    result = self.index.get_value(self, key)\n",
      "  File \"C:\\Users\\tkdal\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py\", line 4744, in get_value\n",
      "    raise e1\n",
      "  File \"C:\\Users\\tkdal\\Anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py\", line 4730, in get_value\n",
      "    return self._engine.get_value(s, k, tz=getattr(series.dtype, \"tz\", None))\n",
      "  File \"pandas\\_libs\\index.pyx\", line 80, in pandas._libs.index.IndexEngine.get_value\n",
      "  File \"pandas\\_libs\\index.pyx\", line 88, in pandas._libs.index.IndexEngine.get_value\n",
      "  File \"pandas\\_libs\\index.pyx\", line 126, in pandas._libs.index.IndexEngine.get_loc\n",
      "  File \"pandas\\_libs\\index.pyx\", line 152, in pandas._libs.index.IndexEngine._get_loc_duplicates\n",
      "  File \"pandas\\_libs\\index.pyx\", line 169, in pandas._libs.index.IndexEngine._maybe_get_bool_indexer\n",
      "KeyError: ''\n",
      "127.0.0.1 - - [01/Jun/2021 01:05:23] \"\u001b[1m\u001b[35mPOST /post3 HTTP/1.1\u001b[0m\" 500 -\n"
     ]
    }
   ],
   "source": [
    "from flask import Flask, json, render_template, request, jsonify\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import re\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.metrics.pairwise import linear_kernel\n",
    "from konlpy.tag import Okt \n",
    "from collections import Counter\n",
    "\n",
    "app = Flask(__name__)\n",
    "\n",
    "file = r'C:\\Users\\tkdal\\Desktop\\project\\data_746.csv'\n",
    "\n",
    "# 데이터 불러오기\n",
    "df = pd.read_csv(file)\n",
    "\n",
    "# 데이터 cleaning\n",
    "df[\"내용\"] = df[\"내용\"].str.replace(pat=r'[^\\w]', repl=r' ', regex=True)\n",
    "\n",
    "@app.route('/')\n",
    "def hello_world():\n",
    "\n",
    "    df_title = df[['제목', '내용']].head(10)\n",
    "\n",
    "    return df_title.to_html()\n",
    "\n",
    "@app.route('/test')\n",
    "def test():\n",
    "    return render_template('post.html')\n",
    "\n",
    "@app.route('/post', methods=['POST'])\n",
    "def post():\n",
    "\n",
    "    value = request.form['test']\n",
    "\n",
    "    title = df[df['제목'] == value]\n",
    "\n",
    "    return title.to_html()\n",
    "\n",
    "@app.route('/test2')\n",
    "def test2():\n",
    "    return render_template('post.html')\n",
    "\n",
    "@app.route('/post2', methods=['POST'])\n",
    "def post2():\n",
    "\n",
    "    value2 = request.form['test2']\n",
    "\n",
    "    # overview에 대해서 tf-idf 수행\n",
    "    tfidf = TfidfVectorizer()\n",
    "    tfidf_matrix = tfidf.fit_transform(df['내용'])\n",
    "\n",
    "    # title = df[df['제목'] == value]\n",
    "\n",
    "    # 선택한 뉴스의 타이틀로부터 해당되는 인덱스를 받아옵니다. 선택한 뉴스를 가지고 연산.\n",
    "    indices = pd.Series(df.index, index=df['제목']).drop_duplicates()\n",
    "    idx = indices[value2]\n",
    "\n",
    "    # 모든 뉴스에 대해서 해당 뉴스와의 유사도 구하기\n",
    "    cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)\n",
    "    sim_scores = list(enumerate(cosine_sim[idx]))\n",
    "\n",
    "    # 유사도에 따라 뉴스들을 정렬합니다.\n",
    "    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n",
    "\n",
    "    # 가장 유사한 10개의 뉴스를 받아옵니다.\n",
    "    sim_scores = sim_scores[1:11]\n",
    "\n",
    "    # 가장 유사한 10개의 뉴스의 인덱스를 받아옵니다.\n",
    "    news_indices = [i[0] for i in sim_scores]\n",
    "\n",
    "    # 가장 유사한 10개의 뉴스의 제목을 리턴합니다.\n",
    "    si = df[['제목', '내용']].iloc[news_indices]\n",
    "\n",
    "    return si.to_html()\n",
    "\n",
    "@app.route('/test3')\n",
    "def test3():\n",
    "    return render_template('post.html')\n",
    "\n",
    "@app.route('/post3', methods=['POST'])\n",
    "def post3():\n",
    "    \n",
    "    # 단어 입력\n",
    "    word = request.form['test3']\n",
    "\n",
    "    okt=Okt()\n",
    "    \n",
    "    # 제일 빈도가 높은 단어, 개수 column에 추가\n",
    "    most_1_word_list = []\n",
    "    most_1_count_list = []\n",
    "    \n",
    "    for i in range(len(df)):\n",
    "        corpus = df['내용'][i]\n",
    "        noun = okt.nouns(corpus)\n",
    "        count = Counter(noun)\n",
    "        most_1_word = count.most_common(1)[0][0]\n",
    "        most_1_count = count.most_common(1)[0][1]\n",
    "        most_1_word_list.append(most_1_word)\n",
    "        most_1_count_list.append(most_1_count)\n",
    "        \n",
    "    df['top1'] = most_1_word_list\n",
    "    df['top1_count'] = most_1_count_list\n",
    "    \n",
    "    # 검색한 단어에 맞는 dataframe 생성\n",
    "    search_list = df[df['top1'] == word]\n",
    "    \n",
    "    # 빈도수가 높은 순으로 정렬\n",
    "    count_sort = search_list.sort_values(by=['top1_count'], axis=0, ascending=False)\n",
    "    \n",
    "    # 검색한 단어가 가장 많이 출현한 문서 리스트 출력\n",
    "    print(\"문서 출력 : \", count_sort['제목'])\n",
    "    \n",
    "    # 제목 입력\n",
    "    title = request.form['test4']\n",
    "    \n",
    "   \n",
    "    # overview에 대해서 tf-idf 수행\n",
    "    tfidf = TfidfVectorizer()\n",
    "    tfidf_matrix = tfidf.fit_transform(df['내용'])\n",
    "    \n",
    "    # 선택한 뉴스의 타이틀로부터 해당되는 인덱스를 받아옵니다. 선택한 뉴스를 가지고 연산.\n",
    "    indices = pd.Series(df.index, index=df['제목']).drop_duplicates()\n",
    "    idx = indices[title]\n",
    "    \n",
    "    # 선택한 뉴스의 내용 저장\n",
    "    corpus = df['내용'][idx]\n",
    "    \n",
    "    # 명사 단위 추출 , 형태소 -> okt.morphs()\n",
    "    noun = okt.nouns(corpus)\n",
    "\n",
    "    # 단어 빈도 계산\n",
    "    count = Counter(noun)\n",
    "\n",
    "    return count_sort[['제목', '내용']], count.most_common(10)\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
